/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ElementRef } from '@angular/core';
import { Directive } from '@angular/core';
import 'jquery-nice-select';
export class NgNiceSelectDirective {
    /**
     * @param {?} el
     */
    constructor(el) {
        this.el = el;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        $(this.el.nativeElement).niceSelect();
        this.attachAngularChange();
        this.attachObserver();
    }
    /**
     * @return {?}
     */
    attachAngularChange() {
        $(this.el.nativeElement).one('change', () => {
            /** @type {?} */
            const customEvent = document.createEvent('Event');
            customEvent.initEvent('change', true, true);
            this.el.nativeElement.dispatchEvent(customEvent);
            this.attachAngularChange();
        });
    }
    /**
     * @return {?}
     */
    attachObserver() {
        this.observer = new MutationObserver(mutations => {
            mutations.forEach(() => this.onChanges());
        });
        this.observer.observe(this.el.nativeElement, {
            attributes: true,
            childList: true,
            characterData: true
        });
    }
    /**
     * @return {?}
     */
    detachObserver() {
        this.observer.disconnect();
    }
    /**
     * @return {?}
     */
    onChanges() {
        this.detachObserver();
        $(this.el.nativeElement).niceSelect('update');
        this.attachObserver();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.detachObserver();
        $(this.el.nativeElement).niceSelect('destroy');
    }
}
NgNiceSelectDirective.decorators = [
    { type: Directive, args: [{
                selector: '[nice-select]',
            },] }
];
/** @nocollapse */
NgNiceSelectDirective.ctorParameters = () => [
    { type: ElementRef }
];
if (false) {
    /** @type {?} */
    NgNiceSelectDirective.prototype.observer;
    /**
     * @type {?}
     * @private
     */
    NgNiceSelectDirective.prototype.el;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctbmljZS1zZWxlY3QuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctbmljZS1zZWxlY3QvIiwic291cmNlcyI6WyJsaWIvbmctbmljZS1zZWxlY3QuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFxRCxNQUFNLGVBQWUsQ0FBQztBQUM5RixPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzFDLE9BQU8sb0JBQW9CLENBQUM7QUFPNUIsTUFBTSxPQUFPLHFCQUFxQjs7OztJQUloQyxZQUNVLEVBQWM7UUFBZCxPQUFFLEdBQUYsRUFBRSxDQUFZO0lBQ3JCLENBQUM7Ozs7SUFFSixlQUFlO1FBQ2IsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLENBQUMsVUFBVSxFQUFFLENBQUM7UUFFdEMsSUFBSSxDQUFDLG1CQUFtQixFQUFFLENBQUM7UUFDM0IsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO0lBQ3hCLENBQUM7Ozs7SUFFRCxtQkFBbUI7UUFDakIsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxHQUFHLEVBQUU7O2tCQUNwQyxXQUFXLEdBQUcsUUFBUSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUM7WUFDakQsV0FBVyxDQUFDLFNBQVMsQ0FBQyxRQUFRLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQzVDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUNqRCxJQUFJLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztRQUM3QixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7Ozs7SUFFRCxjQUFjO1FBQ1osSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxFQUFFO1lBQy9DLFNBQVMsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUM7UUFDNUMsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRTtZQUMzQyxVQUFVLEVBQUUsSUFBSTtZQUNoQixTQUFTLEVBQUUsSUFBSTtZQUNmLGFBQWEsRUFBRSxJQUFJO1NBQ3BCLENBQUMsQ0FBQztJQUNMLENBQUM7Ozs7SUFFRCxjQUFjO1FBQ1osSUFBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUM3QixDQUFDOzs7O0lBRUQsU0FBUztRQUNQLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUN0QixDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDOUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO0lBQ3hCLENBQUM7Ozs7SUFFRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO1FBQ3RCLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUNqRCxDQUFDOzs7WUFwREYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxlQUFlO2FBQzFCOzs7O1lBUlEsVUFBVTs7OztJQVdqQix5Q0FBMkI7Ozs7O0lBR3pCLG1DQUFzQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVsZW1lbnRSZWYsIE9uRGVzdHJveSwgT25DaGFuZ2VzLCBBZnRlclZpZXdJbml0LCBIb3N0TGlzdGVuZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IERpcmVjdGl2ZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0ICdqcXVlcnktbmljZS1zZWxlY3QnO1xuXG5kZWNsYXJlIHZhciAkO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbbmljZS1zZWxlY3RdJyxcbn0pXG5leHBvcnQgY2xhc3MgTmdOaWNlU2VsZWN0RGlyZWN0aXZlIGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCwgT25EZXN0cm95IHtcblxuICBvYnNlcnZlcjogTXV0YXRpb25PYnNlcnZlcjtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGVsOiBFbGVtZW50UmVmXG4gICkge31cblxuICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZCB7XG4gICAgJCh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQpLm5pY2VTZWxlY3QoKTtcblxuICAgIHRoaXMuYXR0YWNoQW5ndWxhckNoYW5nZSgpO1xuICAgIHRoaXMuYXR0YWNoT2JzZXJ2ZXIoKTtcbiAgfVxuXG4gIGF0dGFjaEFuZ3VsYXJDaGFuZ2UoKTogdm9pZCB7XG4gICAgJCh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQpLm9uZSgnY2hhbmdlJywgKCkgPT4ge1xuICAgICAgY29uc3QgY3VzdG9tRXZlbnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnRXZlbnQnKTtcbiAgICAgIGN1c3RvbUV2ZW50LmluaXRFdmVudCgnY2hhbmdlJywgdHJ1ZSwgdHJ1ZSk7XG4gICAgICB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQuZGlzcGF0Y2hFdmVudChjdXN0b21FdmVudCk7XG4gICAgICB0aGlzLmF0dGFjaEFuZ3VsYXJDaGFuZ2UoKTtcbiAgICB9KTtcbiAgfVxuXG4gIGF0dGFjaE9ic2VydmVyKCkge1xuICAgIHRoaXMub2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcihtdXRhdGlvbnMgPT4ge1xuICAgICAgbXV0YXRpb25zLmZvckVhY2goKCkgPT4gdGhpcy5vbkNoYW5nZXMoKSk7XG4gICAgfSk7XG5cbiAgICB0aGlzLm9ic2VydmVyLm9ic2VydmUodGhpcy5lbC5uYXRpdmVFbGVtZW50LCB7XG4gICAgICBhdHRyaWJ1dGVzOiB0cnVlLFxuICAgICAgY2hpbGRMaXN0OiB0cnVlLFxuICAgICAgY2hhcmFjdGVyRGF0YTogdHJ1ZVxuICAgIH0pO1xuICB9XG5cbiAgZGV0YWNoT2JzZXJ2ZXIoKSB7XG4gICAgdGhpcy5vYnNlcnZlci5kaXNjb25uZWN0KCk7XG4gIH1cblxuICBvbkNoYW5nZXMoKSB7XG4gICAgdGhpcy5kZXRhY2hPYnNlcnZlcigpO1xuICAgICQodGhpcy5lbC5uYXRpdmVFbGVtZW50KS5uaWNlU2VsZWN0KCd1cGRhdGUnKTtcbiAgICB0aGlzLmF0dGFjaE9ic2VydmVyKCk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLmRldGFjaE9ic2VydmVyKCk7XG4gICAgJCh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQpLm5pY2VTZWxlY3QoJ2Rlc3Ryb3knKTtcbiAgfVxuXG59XG4iXX0=