/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ElementRef } from '@angular/core';
import { Directive } from '@angular/core';
import 'jquery-nice-select';
var NgNiceSelectDirective = /** @class */ (function () {
    function NgNiceSelectDirective(el) {
        this.el = el;
    }
    /**
     * @return {?}
     */
    NgNiceSelectDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        $(this.el.nativeElement).niceSelect();
        this.attachAngularChange();
        this.attachObserver();
    };
    /**
     * @return {?}
     */
    NgNiceSelectDirective.prototype.attachAngularChange = /**
     * @return {?}
     */
    function () {
        var _this = this;
        $(this.el.nativeElement).one('change', function () {
            /** @type {?} */
            var customEvent = document.createEvent('Event');
            customEvent.initEvent('change', true, true);
            _this.el.nativeElement.dispatchEvent(customEvent);
            _this.attachAngularChange();
        });
    };
    /**
     * @return {?}
     */
    NgNiceSelectDirective.prototype.attachObserver = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.observer = new MutationObserver(function (mutations) {
            mutations.forEach(function () { return _this.onChanges(); });
        });
        this.observer.observe(this.el.nativeElement, {
            attributes: true,
            childList: true,
            characterData: true
        });
    };
    /**
     * @return {?}
     */
    NgNiceSelectDirective.prototype.detachObserver = /**
     * @return {?}
     */
    function () {
        this.observer.disconnect();
    };
    /**
     * @return {?}
     */
    NgNiceSelectDirective.prototype.onChanges = /**
     * @return {?}
     */
    function () {
        this.detachObserver();
        $(this.el.nativeElement).niceSelect('update');
        this.attachObserver();
    };
    /**
     * @return {?}
     */
    NgNiceSelectDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.detachObserver();
        $(this.el.nativeElement).niceSelect('destroy');
    };
    NgNiceSelectDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[nice-select]',
                },] }
    ];
    /** @nocollapse */
    NgNiceSelectDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return NgNiceSelectDirective;
}());
export { NgNiceSelectDirective };
if (false) {
    /** @type {?} */
    NgNiceSelectDirective.prototype.observer;
    /**
     * @type {?}
     * @private
     */
    NgNiceSelectDirective.prototype.el;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctbmljZS1zZWxlY3QuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctbmljZS1zZWxlY3QvIiwic291cmNlcyI6WyJsaWIvbmctbmljZS1zZWxlY3QuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFxRCxNQUFNLGVBQWUsQ0FBQztBQUM5RixPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzFDLE9BQU8sb0JBQW9CLENBQUM7QUFJNUI7SUFPRSwrQkFDVSxFQUFjO1FBQWQsT0FBRSxHQUFGLEVBQUUsQ0FBWTtJQUNyQixDQUFDOzs7O0lBRUosK0NBQWU7OztJQUFmO1FBQ0UsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLENBQUMsVUFBVSxFQUFFLENBQUM7UUFFdEMsSUFBSSxDQUFDLG1CQUFtQixFQUFFLENBQUM7UUFDM0IsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO0lBQ3hCLENBQUM7Ozs7SUFFRCxtREFBbUI7OztJQUFuQjtRQUFBLGlCQU9DO1FBTkMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRTs7Z0JBQy9CLFdBQVcsR0FBRyxRQUFRLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQztZQUNqRCxXQUFXLENBQUMsU0FBUyxDQUFDLFFBQVEsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDNUMsS0FBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBQ2pELEtBQUksQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO1FBQzdCLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzs7OztJQUVELDhDQUFjOzs7SUFBZDtRQUFBLGlCQVVDO1FBVEMsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLGdCQUFnQixDQUFDLFVBQUEsU0FBUztZQUM1QyxTQUFTLENBQUMsT0FBTyxDQUFDLGNBQU0sT0FBQSxLQUFJLENBQUMsU0FBUyxFQUFFLEVBQWhCLENBQWdCLENBQUMsQ0FBQztRQUM1QyxDQUFDLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFO1lBQzNDLFVBQVUsRUFBRSxJQUFJO1lBQ2hCLFNBQVMsRUFBRSxJQUFJO1lBQ2YsYUFBYSxFQUFFLElBQUk7U0FDcEIsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzs7OztJQUVELDhDQUFjOzs7SUFBZDtRQUNFLElBQUksQ0FBQyxRQUFRLENBQUMsVUFBVSxFQUFFLENBQUM7SUFDN0IsQ0FBQzs7OztJQUVELHlDQUFTOzs7SUFBVDtRQUNFLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUN0QixDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDOUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO0lBQ3hCLENBQUM7Ozs7SUFFRCwyQ0FBVzs7O0lBQVg7UUFDRSxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7UUFDdEIsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ2pELENBQUM7O2dCQXBERixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLGVBQWU7aUJBQzFCOzs7O2dCQVJRLFVBQVU7O0lBNERuQiw0QkFBQztDQUFBLEFBdERELElBc0RDO1NBbkRZLHFCQUFxQjs7O0lBRWhDLHlDQUEyQjs7Ozs7SUFHekIsbUNBQXNCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiwgT25EZXN0cm95LCBPbkNoYW5nZXMsIEFmdGVyVmlld0luaXQsIEhvc3RMaXN0ZW5lciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRGlyZWN0aXZlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgJ2pxdWVyeS1uaWNlLXNlbGVjdCc7XG5cbmRlY2xhcmUgdmFyICQ7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tuaWNlLXNlbGVjdF0nLFxufSlcbmV4cG9ydCBjbGFzcyBOZ05pY2VTZWxlY3REaXJlY3RpdmUgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0LCBPbkRlc3Ryb3kge1xuXG4gIG9ic2VydmVyOiBNdXRhdGlvbk9ic2VydmVyO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgZWw6IEVsZW1lbnRSZWZcbiAgKSB7fVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkIHtcbiAgICAkKHRoaXMuZWwubmF0aXZlRWxlbWVudCkubmljZVNlbGVjdCgpO1xuXG4gICAgdGhpcy5hdHRhY2hBbmd1bGFyQ2hhbmdlKCk7XG4gICAgdGhpcy5hdHRhY2hPYnNlcnZlcigpO1xuICB9XG5cbiAgYXR0YWNoQW5ndWxhckNoYW5nZSgpOiB2b2lkIHtcbiAgICAkKHRoaXMuZWwubmF0aXZlRWxlbWVudCkub25lKCdjaGFuZ2UnLCAoKSA9PiB7XG4gICAgICBjb25zdCBjdXN0b21FdmVudCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdFdmVudCcpO1xuICAgICAgY3VzdG9tRXZlbnQuaW5pdEV2ZW50KCdjaGFuZ2UnLCB0cnVlLCB0cnVlKTtcbiAgICAgIHRoaXMuZWwubmF0aXZlRWxlbWVudC5kaXNwYXRjaEV2ZW50KGN1c3RvbUV2ZW50KTtcbiAgICAgIHRoaXMuYXR0YWNoQW5ndWxhckNoYW5nZSgpO1xuICAgIH0pO1xuICB9XG5cbiAgYXR0YWNoT2JzZXJ2ZXIoKSB7XG4gICAgdGhpcy5vYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKG11dGF0aW9ucyA9PiB7XG4gICAgICBtdXRhdGlvbnMuZm9yRWFjaCgoKSA9PiB0aGlzLm9uQ2hhbmdlcygpKTtcbiAgICB9KTtcblxuICAgIHRoaXMub2JzZXJ2ZXIub2JzZXJ2ZSh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsIHtcbiAgICAgIGF0dHJpYnV0ZXM6IHRydWUsXG4gICAgICBjaGlsZExpc3Q6IHRydWUsXG4gICAgICBjaGFyYWN0ZXJEYXRhOiB0cnVlXG4gICAgfSk7XG4gIH1cblxuICBkZXRhY2hPYnNlcnZlcigpIHtcbiAgICB0aGlzLm9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcbiAgfVxuXG4gIG9uQ2hhbmdlcygpIHtcbiAgICB0aGlzLmRldGFjaE9ic2VydmVyKCk7XG4gICAgJCh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQpLm5pY2VTZWxlY3QoJ3VwZGF0ZScpO1xuICAgIHRoaXMuYXR0YWNoT2JzZXJ2ZXIoKTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMuZGV0YWNoT2JzZXJ2ZXIoKTtcbiAgICAkKHRoaXMuZWwubmF0aXZlRWxlbWVudCkubmljZVNlbGVjdCgnZGVzdHJveScpO1xuICB9XG5cbn1cbiJdfQ==